<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Graphic on Paradoxical</title>
    <link>https://yathenstianbase.github.io/categories/graphic/</link>
    <description>Recent content in Graphic on Paradoxical</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="https://yathenstianbase.github.io/categories/graphic/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rendering Pipeline [渲染管线]</title>
      <link>https://yathenstianbase.github.io/posts/renderingpipeline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yathenstianbase.github.io/posts/renderingpipeline/</guid>
      <description>根据 Introduction to 3D Game Programming with DirectX 一书介绍,渲染流程大致分为以下几个步骤
Input Assembler (IA) stage [输入装配阶段] 此阶段将读取顶点和索引，并将这些数据组合成突击和图元;
Vertex Shader (VS) stage [顶点着色器阶段] 此阶段可以自定义编码，在Unity的shader格式中,&amp;quot;#pragma vertex vert&amp;quot;便是代表声明一个顶点着色器函数；
例如：
v2f vert(appdata v) { v2f o; o.pos = UnityObjectToClipPos(v.vertex); return o; } Hull Shader (HS) stage
Tessellator stage
Domain Shader (DS) stage
Geometry Shader (GS)
Rasterizer (RS) stage
Pixel Shader (PS) stage [像素着色器阶段] 也称为片元着色器,属于可以自定义代码的阶段,处理每一个像素片段的颜色属性;在Unity中可以通过 &amp;ldquo;#pragma fragment frag&amp;quot;申明,
例如:
half4 frag(v2f i) : COLOR { return _Color; } Output Merger (OM) stage</description>
    </item>
    
    <item>
      <title>Unity Scriptable Render Pipeline [Unity可编程渲染管线]</title>
      <link>https://yathenstianbase.github.io/posts/unityscriptablerenderingpipeline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yathenstianbase.github.io/posts/unityscriptablerenderingpipeline/</guid>
      <description>Scriptable Render PipelineLink to headingUnity中SRP管线简化代码构成;
定义SRP资源文件, 对象包含关系为 RenderPipelineAsset -&amp;gt; RenderPipeline -&amp;gt; CRenderer;
CSRPA.cs 定义SRP资源类
[CreateAssetMenu(menuName = &amp;#34;CSRPA&amp;#34;)] public class CSRPA : RenderPipelineAsset { public bool isUseSRPBatching; protected override RenderPipeline CreatePipeline() { return new CSRP(isUseSRPBatching); } } CSRP.cs 定义渲染管线类
internal class CSRP : RenderPipeline { CRenderer crenderer = new CRenderer(); private bool isUseSRPBatching; public CSRP(bool isUseSRPBatching) { this.isUseSRPBatching = isUseSRPBatching; GraphicsSettings.useScriptableRenderPipelineBatching = isUseSRPBatching; } protected override void Render(ScriptableRenderContext context, Camera[] cameras) { foreach (Camera cam in cameras) { crenderer.</description>
    </item>
    
    <item>
      <title>Unity shader params [Unity shader 内置参数]</title>
      <link>https://yathenstianbase.github.io/posts/unity-shader-buildin-params/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yathenstianbase.github.io/posts/unity-shader-buildin-params/</guid>
      <description>不同的光照模型对应不同结构体参数: Diffuse -&amp;gt; SurfaceOutput StandardSpecular -&amp;gt; SurfaceOutputStandardSpecular 结构体中包含的属性： Albedo -&amp;gt; 颜色 Normal -&amp;gt; 切线空间法线 Emission -&amp;gt; 材质发光属性 Alpha -&amp;gt; 透明度 specular -&amp;gt; 高光 Gloss -&amp;gt; 高光强度 Occlusion -&amp;gt; 遮蔽光 Smoothness -&amp;gt; 光滑度 Metallic -&amp;gt; 金属特性 Tag参数: Queue -&amp;gt; 渲染队列（unity默认提供），它们包含如下选项： Background Geometry AlphaTest Transparent[实现玻璃之类] Overlay 将对应的值写入即可； IgnoreProjector -&amp;gt; 布尔值，是否忽略投影； RenderType -&amp;gt; ? TRANSFORM_TEX unity内置宏，自动进行uv偏移和缩放操作; unity_WorldToObject 是一个矩阵，从物体坐标系转化到世界坐标系需要和此矩阵相乘（非等比模型略有不同）; UnityObjectToClipPos 获取物体position; appdata_base 一般常用作数据来源（appdata_full默认内置） v.vertex 获取顶点数据 v.normal 获取顶点法向量 inout 关键字 #pragma 关键字 surface surf Lambert -&amp;gt; surf函数使用SurfaceOutput作为参数； surface surf Standard -&amp;gt; surf函数使用SurfaceOutput作为参数； nolightmap -&amp;gt; 不使用关照贴图； alpha:fade -&amp;gt; 处理transparent效果时候使用； alpha:fade -&amp;gt; 表示根据material中的alpha值对之前渲染像素进行blend，如玻璃的会显示它后面的东西（和zbuffer以及queueu顺序有关） fullforwardshadows -&amp;gt; vertex:vert -&amp;gt; 指示unity寻找一个名为vert()函数执行 tex2D(from, to) UnpackNormal 一般用于获取bumpmap的法向量 saturate() pow() 函数 tex2Dlod() float4(v.</description>
    </item>
    
  </channel>
</rss>
