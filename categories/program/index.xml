<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Program on Paradoxical</title>
    <link>https://yathenstianbase.github.io/categories/program/</link>
    <description>Recent content in Program on Paradoxical</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="https://yathenstianbase.github.io/categories/program/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Accessibility Levels in C# [C#可访问级别]</title>
      <link>https://yathenstianbase.github.io/posts/csharp/accessibility-levels/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yathenstianbase.github.io/posts/csharp/accessibility-levels/</guid>
      <description>访问修饰符 public - 全局访问，可跨程序集; private - 只能由包含类访问; protected - 只能由包含类和包含类的继承类访问; internal - 只能由当前程序集访问; sealed - 不属于访问修饰符，表示一个类不可被继承; protected internal - 可被其他程序集中的派生类所访问; namespace Assembly1 { public class Greet { protected internal string msg=&amp;#34;Hello&amp;#34;; } class Program { static void Main(string[] args) { Greet greet = new Greet(); Console.WriteLine(greet.msg); Console.ReadLine(); } } } // access Assembly1 using Assembly1; namespace Assembly2 { // derived class of Greet class Program: Greet { static void Main(string[] args) { Program greet = new Program(); // 此处可以跨程序集访问&amp;#34;protected internal&amp;#34;修饰的变量 msg Console.</description>
    </item>
    
    <item>
      <title>C# Value type [C#值类型]</title>
      <link>https://yathenstianbase.github.io/posts/csharp/csharpvaluetype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yathenstianbase.github.io/posts/csharp/csharpvaluetype/</guid>
      <description>1,值类型定义
https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/builtin-types/value-types#kinds-of-value-types-and-type-constraints
结构体和类的区别
值类型的变量包含类型的实例。(应该指的就是实际的数值,而非一个引用地址;在内存处如何描述呢?)
值类型在继承体系中由ValueType类表示;
默认情况下，在分配中(应该指的是内存的分配)，通过将实参传递给方法并返回方法结果来复制变量值。 对于值类型变量，会复制相应的类型实例;
伪代码示例:
int val = 3.14f; 传递进方法 change(int val) { val += 1.00f； print(val); // } print(val); // 第一次打印为 4.14
// 第二次打印为 3.14
两次的打印的是两个不同实例的值
2,值类型的种类 C# 提供以下内置值类型，也称为“简单类型”,所有简单值都是结构类型： 整型数值类型 - .NET类型
- sbyte System.Sbyte- byte System.Byte- short System.Int16- ushort System.Uint16- int System.Int32- uint System.UInt32- long System.Int64- ulong System.UInt64- nint System.IntPtr- nuint System.UIntPtr浮点型数值类型 - .NET类型
- float System.</description>
    </item>
    
  </channel>
</rss>
