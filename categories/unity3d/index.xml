<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unity3D on Paradoxical</title>
    <link>https://yathenstianbase.github.io/categories/unity3d/</link>
    <description>Recent content in Unity3D on Paradoxical</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="https://yathenstianbase.github.io/categories/unity3d/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Euler And Quaternion in Unity3D [Euler And Quaternion in Unity3D 欧拉角与四元数]</title>
      <link>https://yathenstianbase.github.io/posts/unity3d/eulerandquaternioninunity3d/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yathenstianbase.github.io/posts/unity3d/eulerandquaternioninunity3d/</guid>
      <description>Unity3d之欧拉角与四元数Link to heading&amp;ndash;slerp 球形插值
在Unity中，如果需要更改物体的Rotation，并不能像更改Position一样直接对Vector赋值进行更改，因为Rotation是四元数的方式。
这时，可以对Rotation进行四元数的转换成欧拉角，做到赋值更改旋转轴数值。
四元数转欧拉角
Vector3 eulerAngles = transform.rotation.eulerAngles; 欧拉角转四元数：
Vector3 eulerAngles = new Vector3(0f, 30f, 0f); // 1 Quaternion rotation = Quaternion.Euler(rotationVector3); // 2 Quaternion rotation = Quaternion.Euler(eulerAngles.x, eulerAngles.y, eulerAngles.z); // 赋值 transform.rotation = rotation; 使用赋值欧拉角方式进行旋转
void Update() { // 直接赋值欧拉角，需要三个变量一起赋值 Vector3 currentEulerAngles += new Vector3(x, y, z) * Time.deltaTime * rotationSpeed; transform.eulerAngles = currentEulerAngles; } 使用四元数进行线性旋转
// void Update() { Turning(dir); } public void Turning(Vector3 dirVec) { if (dirVec !</description>
    </item>
    
    <item>
      <title>Light in Unity3D [Light in Unity3D 渲染管线]</title>
      <link>https://yathenstianbase.github.io/posts/shader/lightinunity3d/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yathenstianbase.github.io/posts/shader/lightinunity3d/</guid>
      <description>根据 Introduction to 3D Game Programming with DirectX 一书介绍,渲染流程大致分为以下几个步骤
Input Assembler (IA) stage [输入装配阶段]
此阶段将读取顶点和索引，并将这些数据组合成突击和图元;
Vertex Shader (VS) stage [顶点着色器阶段]
此阶段可以自定义编码，在Unity的shader格式中,&amp;quot;#pragma vertex vert&amp;quot;便是代表声明一个顶点着色器函数； v2f vert(appdata v) { v2f o; o.pos = UnityObjectToClipPos(v.vertex); return o; } Hull Shader (HS) stage
Tessellator stage
Domain Shader (DS) stage
Geometry Shader (GS)
Rasterizer (RS) stage
Pixel Shader (PS) stage [像素着色器阶段]
也称为片元着色器,属于可以自定义代码的阶段,处理每一个像素片段的颜色属性;在Unity中可以通过 &amp;ldquo;#pragma fragment frag&amp;quot;申明; half4 frag(v2f i) : COLOR { return _Color; } Output Merger (OM) stage</description>
    </item>
    
    <item>
      <title>Unity Coroutine [Unity Coroutine 协程]</title>
      <link>https://yathenstianbase.github.io/posts/unity3d/unity-coroutine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yathenstianbase.github.io/posts/unity3d/unity-coroutine/</guid>
      <description> Coroutine协程是Unity提供的一种在主线程中处理额外任务的方式;
协程并不是多线程，而是利用迭代器进行帧或者时间切片控制，它可以决定每次经过多少切片时间后将游戏的逻辑控制交给主线程;
在Unity的Monobehavior生命周期中,有一个被称为&amp;quot;game logic&amp;quot;的部分,其中包含&amp;quot;yield StarCoroutine&amp;quot;等操作，是属于处理协程的运算逻辑的部分;
Monobehavior生命周期中,依次经过 Star -&amp;gt; yield WaitForFixedUpdate -&amp;gt; Update -&amp;gt; LateUpdate,以下代码使用Unity逐帧运行功能可以初步简单验证:
private void Start() { StartCoroutine(CoUpdate()); } public IEnumerator CoUpdate() { Debug.Log(&amp;#34;before loop CoUpdate&amp;#34;); while (true) { Debug.Log(&amp;#34;before CoUpdate&amp;#34;); yield return new WaitForFixedUpdate(); // 在FixedUpdate处理后 Debug.Log(&amp;#34;after CoUpdate&amp;#34;); } } private void Update() { Debug.Log(&amp;#34;update&amp;#34;); } private void LateUpdate() { Debug.Log(&amp;#34;lateupdate&amp;#34;); } 先点暂停然后启动，逐帧运行一次，打印结果为: 协程的一种暂停方式:
while(!some_condition) { yield return null; } </description>
    </item>
    
  </channel>
</rss>
